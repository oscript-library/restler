
#Использовать json
#Использовать logos
#Использовать strings

Перем мСоединение;
Перем мЗаголовки;
Перем мПараметры;
Перем мДопустимыйКодСостояния;
Перем мТипКонтентаТелаЗапроса;

Перем Лог;

Процедура ИспользоватьСоединение(Знач Соединение) Экспорт
	мСоединение = Соединение;
КонецПроцедуры

Функция Получить(Знач Ресурс) Экспорт
	
	Ресурс = ДобавитьПараметрыЗапросаВРесурсЗапроса(Ресурс);
	HTTPЗапрос = ПолучитьHTTPЗапрос(Ресурс);
	ЛогироватьВыполнениеЗапроса("GET", HTTPЗапрос);

	Ответ = мСоединение.Получить(HTTPЗапрос);
	Возврат ПрочитатьОтветЗапроса(Ответ);
	
КонецФункции

Функция Отправить(Знач Ресурс) Экспорт
	
	HTTPЗапрос = ПолучитьHTTPЗапрос(Ресурс);
	ДобавитьПараметрыЗапросаВТелоЗапроса(HTTPЗапрос);
	
	ЛогироватьВыполнениеЗапроса("POST", HTTPЗапрос);
	
	Ответ = мСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Возврат ПрочитатьОтветЗапроса(Ответ);
	
КонецФункции

Функция Удалить(Знач Ресурс) Экспорт
	
	Ресурс = ДобавитьПараметрыЗапросаВРесурсЗапроса(Ресурс);
	HTTPЗапрос = ПолучитьHTTPЗапрос(Ресурс);
	
	ЛогироватьВыполнениеЗапроса("DELETE", HTTPЗапрос);
	
	Ответ = мСоединение.Удалить(HTTPЗапрос);
	Возврат ПрочитатьОтветЗапроса(Ответ);
	
КонецФункции

Функция Обновить(Знач Ресурс) Экспорт
	
	Ресурс = ДобавитьПараметрыЗапросаВРесурсЗапроса(Ресурс);
	HTTPЗапрос = ПолучитьHTTPЗапрос(Ресурс);
	
	ЛогироватьВыполнениеЗапроса("PATCH", HTTPЗапрос);
	
	ВызватьИсключение("Не реализовано");

КонецФункции

Процедура УстановитьЗаголовки(Знач Заголовки) Экспорт
	мЗаголовки = Заголовки;
КонецПроцедуры

Процедура ДобавитьПараметр(Знач Ключ, Знач Значение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	мПараметры.Добавить(Новый Структура("Ключ, Значение", Ключ, Значение));
	
КонецПроцедуры

Процедура ОчиститьВсеПараметры() Экспорт
	мПараметры = Новый Массив;
КонецПроцедуры

Процедура УстановитьДопустимыйКодСостояния(Знач КодСостояния) Экспорт
	мДопустимыйКодСостояния = КодСостояния;
КонецПроцедуры

Процедура УстановитьТипКонтентаТелаЗапроса(Знач ТипКонтентаТелаЗапроса) Экспорт
	мТипКонтентаТелаЗапроса = ТипКонтентаТелаЗапроса;
КонецПроцедуры

Функция ПолучитьHTTPЗапрос(Знач Ресурс) Экспорт
	Возврат Новый HTTPЗапрос(Ресурс, мЗаголовки);
КонецФункции

/////////////////////////////////////////////////////////

Функция ЛогироватьВыполнениеЗапроса(Знач ТипОперации, Знач HTTPЗапрос)

	ЗаголовкиЗапроса = "";
	Для Каждого ЗаголовокЗапроса Из HTTPЗапрос.Заголовки Цикл
		ЗаголовкиЗапроса = ЗаголовкиЗапроса + ЗаголовокЗапроса.Ключ + ": " + ЗаголовокЗапроса.Значение;
	КонецЦикла;

	ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакСтроку();
	Если ТелоЗапроса = Неопределено Тогда
		ТелоЗапроса = "";
	КонецЕсли;

	Лог.Отладка("Выполняю %1-запрос: %2:%3/%4", ТипОперации, мСоединение.Сервер, мСоединение.Порт, HTTPЗапрос.АдресРесурса);
	Лог.Отладка("Заголовки запроса:
		|%1", ЗаголовкиЗапроса);
	Лог.Отладка("Тело запроса:
		|%1", ТелоЗапроса);

КонецФункции

Функция ПрочитатьОтветЗапроса(Знач Ответ)
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	Если ТелоОтвета = Неопределено Тогда
		ТелоОтвета = "";
	КонецЕсли;

	Лог.Отладка("Код состояния: %1", Ответ.КодСостояния);
	Лог.Отладка("Тело ответа: 
		|%1", ТелоОтвета);
	
	Если Ответ.КодСостояния <> мДопустимыйКодСостояния Тогда
		ТекстСообщения = СтрШаблон(
			"Получен код возврата: %1
			|Тело ответа: %2", 
			Ответ.КодСостояния,
			ТелоОтвета
		);
		ИнфИсключение = Новый ИнформацияОбОшибке(ТекстСообщения, Ответ);
		ВызватьИсключение ИнфИсключение;
	КонецЕсли;

	Результат = Неопределено;
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		Парсер = Новый ПарсерJSON;
		Результат = Парсер.ПрочитатьJSON(ТелоОтвета);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ДобавитьПараметрыЗапросаВРесурсЗапроса(Знач Ресурс)
	
	Если мПараметры.Количество() = 0 Тогда
		Возврат Ресурс;
	КонецЕсли;
	
	Ресурс = Ресурс + "?";
	
	Для Каждого ПараметрЗапроса из мПараметры Цикл
		Ресурс = Ресурс + ПараметрЗапроса.Ключ + "=" + ПараметрЗапроса.Значение + "&";
	КонецЦикла;
	
	СтроковыеФункции.УдалитьПоследнийСимволВСтроке(Ресурс);
	
	Возврат Ресурс;
	
КонецФункции

Процедура ДобавитьПараметрыЗапросаВТелоЗапроса(Знач Запрос)
	
	Если мТипКонтентаТелаЗапроса = ТипКонтентаТелаЗапроса.JSON Тогда
		ТелоЗапроса = ПолучитьТелоЗапросаJSON();
	ИначеЕсли мТипКонтентаТелаЗапроса = ТипКонтентаТелаЗапроса.XWwwFormUrlEncoded Тогда
		ТелоЗапроса = ПолучитьТелоЗапросаXWwwFormUrlEncoded();
	Иначе
		ВызватьИсключение "Тип контента не реализован.";
	КонецЕсли;

	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8NoBom);
	Запрос.Заголовки.Вставить("Content-Type", мТипКонтентаТелаЗапроса);
	
КонецПроцедуры

Функция ПолучитьТелоЗапросаJSON()
	
	СтруктураПараметров = Новый Структура;
	Для Каждого Параметр Из мПараметры Цикл
		СтруктураПараметров.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	ПарсерJSON = Новый ПарсерJSON;
	ТелоЗапроса = ПарсерJSON.ЗаписатьJSON(СтруктураПараметров);

	Возврат ТелоЗапроса;

КонецФункции

Функция ПолучитьТелоЗапросаXWwwFormUrlEncoded()
	
	ТелоЗапроса = "";

	Если мПараметры.Количество() = 0 Тогда
		Возврат ТелоЗапроса;
	КонецЕсли;

	Для Каждого Параметр Из мПараметры Цикл
		ТелоЗапроса = ТелоЗапроса + EncodeURL(Параметр.Ключ) + "=" + EncodeURL(Параметр.Значение) + "&";
	КонецЦикла;
	
	СтроковыеФункции.УдалитьПоследнийСимволВСтроке(ТелоЗапроса);

	Возврат ТелоЗапроса;

КонецФункции

Функция hex(Знач Значение) 
    Значение=Число(Значение);
    Если Значение<=0 Тогда 
        Результат="0";
    Иначе
        Значение=Цел(Значение);
        Результат="";
        Пока Значение>0 Цикл
            Результат=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение%16 + 1,1)+Результат;
            Значение=Цел(Значение/16) ;
        КонецЦикла;
    КонецЕсли;
    Если СтрДлина(Результат) < 2 Тогда
    
        Результат = "0" + Результат;
    
    КонецЕсли; 
	Возврат "%" + Результат;
КонецФункции

Функция EncodeURL(URL)
    
	Рез = "";
	
	Для Сч = 1 По СтрДлина(URL) Цикл
		
		ch = Сред(URL, Сч, 1);
		vch = КодСимвола(ch);
		
		Если ("A" <= ch ) И ( ch <= "Z") Тогда       // "A".."Z"
			Рез = Рез + ch;
		ИначеЕсли ("a" <= ch ) И ( ch <= "z") Тогда   // "a".."z"
			Рез = Рез + ch;
		ИначеЕсли ("0" <= ch ) И ( ch <= "9") Тогда   // "0".."9"
			Рез = Рез + ch;
		ИначеЕсли (ch = " ") ИЛИ ( ch = "+") Тогда           // space
			Рез = Рез + "+";
		ИначеЕсли (ch = "-" ) ИЛИ ( ch = "_") Тогда       // unreserved
			Рез = Рез + ch;
		ИначеЕсли (vch <= 127) Тогда       // other ASCII
			Рез = Рез + hex(vch);
		ИначеЕсли (vch <= 2047) Тогда       // non-ASCII <= 0x7FF
			Рез = Рез + hex(192 + Цел(vch / 64));
			Рез = Рез + hex(128 + (vch % 64));
		Иначе                   // 0x7FF < ch <= 0xFFFF
			Рез = Рез + hex(224 + Цел(vch / 4096));
			Рез = Рез + hex(128 + (Цел(vch / 64) % 64));
			Рез = Рез + hex(128 + (vch % 64));
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат Рез;

КонецФункции

/////////////////////////////////////////////////////////
мЗаголовки = Новый Соответствие;
мПараметры = Новый Массив;
мДопустимыйКодСостояния = 200;
мТипКонтентаТелаЗапроса = ТипКонтентаТелаЗапроса.XWwwFormUrlEncoded;
Лог = Логирование.ПолучитьЛог("oscript.lib.restler");
